package io.github.guisso.moviecatalog.movie;

import io.github.guisso.moviecatalog.genre.Genre;
import io.github.guisso.moviecatalog.genre.GenreDao;
import java.awt.Component;
import java.awt.SystemColor;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/*
 * CC BY-NC-SA 4.0
 *
 * Copyright 2022 Luis Guisso &lt;luis dot guisso at ifnmg dot edu dot br&gt;.
 *
 * Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
 *
 * You are free to:
 *   Share - copy and redistribute the material in any medium or format
 *   Adapt - remix, transform, and build upon the material
 *
 * Under the following terms:
 *   Attribution - You must give appropriate credit, provide 
 *   a link to the license, and indicate if changes were made.
 *   You may do so in any reasonable manner, but not in any 
 *   way that suggests the licensor endorses you or your use.
 *   NonCommercial - You may not use the material for commercial purposes.
 *   ShareAlike - If you remix, transform, or build upon the 
 *   material, you must distribute your contributions under 
 *   the same license as the original.
 *   No additional restrictions - You may not apply legal 
 *   terms or technological measures that legally restrict 
 *   others from doing anything the license permits.
 *
 * Notices:
 *   You do not have to comply with the license for elements 
 *   of the material in the public domain or where your use 
 *   is permitted by an applicable exception or limitation.
 *   No warranties are given. The license may not give you 
 *   all of the permissions necessary for your intended use. 
 *   For example, other rights such as publicity, privacy, 
 *   or moral rights may limit how you use the material.
 */
/**
 *
 * @author Luis Guisso &lt;luis dot guisso at ifnmg dot edu dot br&gt;
 */
public class MoviesByGenreRegistration extends javax.swing.JInternalFrame {

    private static MoviesByGenreRegistration instance;

    private static final DefaultListModel<Genre> allGenres
            = new DefaultListModel<>();

    private static final DefaultListModel<Movie> moviesFromGenre
            = new DefaultListModel<>();

    private static final DefaultListModel<Movie> searchMovieResults
            = new DefaultListModel<>();

    /**
     * Creates new form MoviesByGenreRegistration
     */
    private MoviesByGenreRegistration() {
        initComponents();

        // Model associations
        lstGenres.setModel(allGenres);
        lstGenres.setCellRenderer(new GenreRenderer());

        lstMoviesFromGenre.setModel(moviesFromGenre);
        lstMoviesFromGenre.setCellRenderer(new MovieRenderer());

        lstSearchMovieResult.setModel(searchMovieResults);
        lstSearchMovieResult.setCellRenderer(new MovieRenderer());

        // Initial genre load
        allGenres.addAll(new GenreDao().findAll());

    }

    public static MoviesByGenreRegistration getInstance() {
        if (instance == null) {
            instance = new MoviesByGenreRegistration();
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblGenres = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstGenres = new javax.swing.JList<>();
        lblMovies = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstMoviesFromGenre = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstSearchMovieResult = new javax.swing.JList<>();
        txtSearchMovie = new javax.swing.JTextField();
        lblNewMovie = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Movies by Genre");

        lblGenres.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblGenres.setText("Genres");

        lstGenres.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lstGenres.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstGenres.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstGenresValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstGenres);

        lblMovies.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblMovies.setText("Movies");

        lstMoviesFromGenre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lstMoviesFromGenre.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(lstMoviesFromGenre);

        lstSearchMovieResult.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lstSearchMovieResult.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstSearchMovieResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstSearchMovieResultMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(lstSearchMovieResult);

        txtSearchMovie.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearchMovie.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchMovieKeyReleased(evt);
            }
        });

        lblNewMovie.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNewMovie.setText("New Movie to Genre");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblGenres)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMovies)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblNewMovie)
                    .addComponent(jScrollPane3)
                    .addComponent(txtSearchMovie))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGenres)
                    .addComponent(lblMovies)
                    .addComponent(lblNewMovie))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtSearchMovie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lstGenresValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstGenresValueChanged
        // https://stackoverflow.com/a/12461895/1431808
        // Prevents double event action on click
        if (!evt.getValueIsAdjusting()) {
            moviesFromGenre.clear();
            try {
                moviesFromGenre.addAll(new MovieDao()
                        .findAllByGenre(lstGenres.getSelectedValue()));
            } catch (Exception ex) {
                // When findAllByGenre returns null...
                Logger.getLogger(MoviesByGenreRegistration.class
                        .getName())
                        .log(Level.INFO, ex.getMessage(), ex);
            }
        }

        // Key pressed "simulation" to update search list
        txtSearchMovieKeyReleased(null);
    }//GEN-LAST:event_lstGenresValueChanged

    private void txtSearchMovieKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchMovieKeyReleased
        searchMovieResults.clear();

        try {
            List<Movie> result;
            result = new MovieDao()
                    .findAllByPartialName(txtSearchMovie.getText());

            // Remove movies already associated with the genre
            // to block repeat associations
            result = result.stream()
                    .filter(movie
                            -> !Arrays.asList(moviesFromGenre.toArray())
                            .contains(movie))
                    .collect(Collectors.toList());

            searchMovieResults.addAll(result);

        } catch (Exception ex) {
            // When findAllByPartialName returns null...
            Logger.getLogger(MoviesByGenreRegistration.class
                    .getName())
                    .log(Level.INFO, ex.getMessage(), ex);
        }
    }//GEN-LAST:event_txtSearchMovieKeyReleased

    private void lstSearchMovieResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstSearchMovieResultMouseClicked
        Movie selectedMovie = lstSearchMovieResult.getSelectedValue();
        Genre selectedGenre = lstGenres.getSelectedValue();

        if (evt.getClickCount() == 2 && selectedMovie != null) {
            try {
                // Change the genre
                selectedMovie.setGenre(selectedGenre);

                // Save the updates
                new MovieDao().saveOrUpdate(selectedMovie);

            } catch (Exception ex) {
                Logger.getLogger(MoviesByGenreRegistration.class.getName()).log(Level.SEVERE, null, ex);
            }

            // GUI update
            moviesFromGenre.clear();
            moviesFromGenre.addAll(
                    new MovieDao().findAllByGenre(selectedGenre));

            // Key pressed "simulation" to update search list
            txtSearchMovieKeyReleased(null);
        }
    }//GEN-LAST:event_lstSearchMovieResultMouseClicked

    // Custom render (name vs !toString) for Gender on list box
    private class GenreRenderer
            extends JLabel
            implements ListCellRenderer<Genre> {

        @Override
        public Component getListCellRendererComponent(
                JList<? extends Genre> list, Genre value,
                int index, boolean isSelected, boolean cellHasFocus) {
            if (value == null) {
                return this;
            }

            setOpaque(true);
            setForeground(SystemColor.textText);
            setBackground(SystemColor.text);
            if (isSelected) {
                setForeground(SystemColor.textHighlightText);
                setBackground(SystemColor.textHighlight);
            }

            // The value to be rendered on the combo box
            setText(value.getName());

            setBorder(BorderFactory.createEmptyBorder(0, 5, 1, 1));
            return this;
        }
    }

    // Custom render (title vs !toString) for Movie on list box
    private class MovieRenderer
            extends JLabel
            implements ListCellRenderer<Movie> {

        @Override
        public Component getListCellRendererComponent(
                JList<? extends Movie> list, Movie value,
                int index, boolean isSelected, boolean cellHasFocus) {
            if (value == null) {
                return this;
            }

            setOpaque(true);
            setForeground(SystemColor.textText);
            setBackground(SystemColor.text);
            if (isSelected) {
                setForeground(SystemColor.textHighlightText);
                setBackground(SystemColor.textHighlight);
            }

            // The value to be rendered on the combo box
            setText(value.getTitle());

            setBorder(BorderFactory.createEmptyBorder(0, 5, 1, 1));
            return this;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblGenres;
    private javax.swing.JLabel lblMovies;
    private javax.swing.JLabel lblNewMovie;
    private javax.swing.JList<Genre> lstGenres;
    private javax.swing.JList<Movie> lstMoviesFromGenre;
    private javax.swing.JList<Movie> lstSearchMovieResult;
    private javax.swing.JTextField txtSearchMovie;
    // End of variables declaration//GEN-END:variables
}
